import sys
import os
import time
import threading
import mss
from PIL import Image
import cv2
import numpy as np
import pytesseract
import pyautogui
import random
import re
from pynput import keyboard

# === 全域參數/開關 ===
MODE = "all"    # "all":補血/移動/buff  "buff":只buff

# 補血行為
HEAL_KEY = 'ctrl'
HEAL_HOLD_MIN = 3.0      # 每次補血長按最短秒
HEAL_HOLD_MAX = 5.0      # 最長秒
HEAL_HOLD_CHECK = 0.12   # 補血期間偵測間隔（越低越即時）

# 補血時瞬移
HEAL_MOVE_INTERVAL_MIN = 0.4
HEAL_MOVE_INTERVAL_MAX = 1.1
HEAL_MOVE_CHANCE = 0.30

# 模擬真人按鍵
KEY_HOLD_MIN = 0.10      # 每個按鍵最短hold秒
KEY_HOLD_MAX = 0.25      # 最長hold秒

# OCR/血量監控
REGION_HP = {'top': 1050, 'left': 670, 'width': 65, 'height': 22}  # 你自己根據新血量區調整
OCR_INTERVAL = 0.1
SAVE_OCR_IMAGE = False
OCR_SAVE_DIR = "debug/ocr"

# 移動
MOVE_LEFT_KEY = "left"
MOVE_RIGHT_KEY = "right"
JUMP_KEY = "space"

# Idle/警戒
IDLE_TIME = 5.0
GUARD_TIME = 1.0
IDLE_MOVE_MIN = 0.12
IDLE_MOVE_MAX = 0.25
IDLE_MOVE_INTERVAL_MIN = 0.35
IDLE_MOVE_INTERVAL_MAX = 0.8

DEBUG = True

# 狀態
NEED_HEAL = False
CUR_HP = None
MAX_HP = None
running = True
paused = False
started = False

# 路徑設定與匯入
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'lib')))
import autobuff

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# ==== Utils ====
def log(msg):
    if DEBUG:
        print(msg)

def nowstr():
    return time.strftime("[%Y-%m-%d %H:%M:%S]", time.localtime())

def extract_hp(text):
    """
    只抓純 xxx/yyy 格式，數值合理才算血量。
    """
    max_valid = 9999    # 角色血量最大值（依自己角色調）
    # 找所有像 1271/1271 這樣的格式
    matches = re.findall(r'(\d{1,5})\s*/\s*(\d{1,5})', text)
    candidates = []
    for cur, total in matches:
        cur = int(cur)
        total = int(total)
        if 0 < cur <= total <= max_valid:
            candidates.append((cur, total))
    if candidates:
        best = max(candidates, key=lambda x: x[1])
        return best
    print(f"[WARN] 血量辨識失敗，OCR內容='{text.strip()}'")
    return None, None

def pre_process(pil_img):
    img = np.array(pil_img)
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    scale = 3
    gray = cv2.resize(gray, (gray.shape[1]*scale, gray.shape[0]*scale), interpolation=cv2.INTER_CUBIC)
    _, th = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return th

def key_press(key, hold_min=KEY_HOLD_MIN, hold_max=KEY_HOLD_MAX):
    hold = random.uniform(hold_min, hold_max)
    pyautogui.keyDown(key)
    time.sleep(hold)
    pyautogui.keyUp(key)
    log(f"[KEY] 按下 {key} 持續 {hold:.2f}s")

def key_combo(keys, hold_min=KEY_HOLD_MIN, hold_max=KEY_HOLD_MAX):
    hold = random.uniform(hold_min, hold_max)
    for k in keys:
        pyautogui.keyDown(k)
    time.sleep(hold)
    for k in keys:
        pyautogui.keyUp(k)
    log(f"[KEY] 按下 {'+'.join(keys)} 持續 {hold:.2f}s")

# ==== OCR Thread ====
def ocr_hp():
    with mss.mss() as sct:
        shot = sct.grab(REGION_HP)
        img = Image.frombytes('RGB', shot.size, shot.rgb)
    if SAVE_OCR_IMAGE:
        os.makedirs(OCR_SAVE_DIR, exist_ok=True)
        fname = f"{OCR_SAVE_DIR}/hp_{int(time.time()*1000)}.png"
        img.save(fname)
        log(f"[OCR] 已存圖：{fname}")
    proc = pre_process(img)
    custom_config = r'--oem 3 --psm 7 -c tessedit_char_whitelist=0123456789/'   # 只允許數字與斜線
    ocr_txt = pytesseract.image_to_string(proc, config=custom_config)
    hp, max_hp = extract_hp(ocr_txt)
    log(f"[OCR] OCR結果: '{ocr_txt.strip()}', 解析血量：{hp} / {max_hp}")
    return hp, max_hp

def ocr_monitor():
    global NEED_HEAL, CUR_HP, MAX_HP, running
    log("[THREAD] 啟動 OCR 監測 thread")
    while running:
        hp, max_hp = ocr_hp()
        CUR_HP, MAX_HP = hp, max_hp
        NEED_HEAL = (hp is not None and max_hp is not None and hp < max_hp)
        time.sleep(OCR_INTERVAL)

# ==== 鍵盤監控 ====
def monitor_keys():
    global running, started, paused
    def on_press(key):
        global running, started, paused
        try:
            if key.char == 'q':
                print("[EXIT] 偵測到 q，程式結束")
                running = False
                return False
            elif key.char == 'r' and not started:
                print("[START] 偵測到 r，開始執行")
                started = True
            elif key.char == 'p':
                paused = not paused
                print("[PAUSE]" if paused else "[RESUME]")
        except AttributeError:
            pass
    print("[KEY] 啟動鍵盤監聽 thread")
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()

# ==== 主補血循環 ====
def random_instant_move():
    move_key = random.choice([MOVE_LEFT_KEY, MOVE_RIGHT_KEY])
    log(f"[HEAL-MOVE] 執行瞬移: {move_key}+{JUMP_KEY}")
    pyautogui.keyDown(move_key)
    time.sleep(random.uniform(KEY_HOLD_MIN, KEY_HOLD_MAX))
    pyautogui.keyDown(JUMP_KEY)
    time.sleep(random.uniform(KEY_HOLD_MIN, KEY_HOLD_MAX))
    pyautogui.keyUp(move_key)
    pyautogui.keyUp(JUMP_KEY)
    log(f"[HEAL-MOVE] 補血時瞬移 {move_key}+{JUMP_KEY}")

def heal_press_and_move():
    global NEED_HEAL, CUR_HP, MAX_HP, running
    hold_time = random.uniform(HEAL_HOLD_MIN, HEAL_HOLD_MAX)
    log(f"[HEAL] 長按補血鍵 {HEAL_KEY} 預計 {hold_time:.2f}s")
    pyautogui.keyDown(HEAL_KEY)
    start_time = time.time()
    next_move = start_time + random.uniform(HEAL_MOVE_INTERVAL_MIN, HEAL_MOVE_INTERVAL_MAX)
    try:
        while running and NEED_HEAL:
            now = time.time()
            if CUR_HP is not None and MAX_HP is not None and CUR_HP >= MAX_HP:
                log("[HEAL] 血補滿即放開")
                break
            if now - start_time >= hold_time:
                log("[HEAL] 補血hold時間到")
                break
            if now >= next_move and random.random() < HEAL_MOVE_CHANCE:
                random_instant_move()
                next_move = now + random.uniform(HEAL_MOVE_INTERVAL_MIN, HEAL_MOVE_INTERVAL_MAX)
            time.sleep(HEAL_HOLD_CHECK)
    finally:
        pyautogui.keyUp(HEAL_KEY)
        log(f"[HEAL] 放開補血鍵 {HEAL_KEY}")

# ==== 主流程 ====
def main_behavior():
    global running, started, paused, NEED_HEAL, CUR_HP, MAX_HP
    print("等待 r 開始，q 結束，p 暫停/繼續")
    while running and not started:
        time.sleep(0.05)
    print("[MAIN] 進入主行為迴圈")
    in_guard_mode = False
    in_idle_mode = False

    while running:
        if paused:
            time.sleep(0.05)
            continue
        if NEED_HEAL:
            log(f"{nowstr()} [INFO] 進入補血循環")
            while NEED_HEAL and running:
                heal_press_and_move()
                time.sleep(0.02)
            log(f"{nowstr()} [INFO] 補血結束，進入警戒")
            in_guard_mode = True
            in_idle_mode = False
            continue
        if in_guard_mode:
            log(f"{nowstr()} [GUARD] 警戒 {GUARD_TIME}s")
            t0 = time.time()
            while time.time() - t0 < GUARD_TIME and running:
                if NEED_HEAL:
                    in_guard_mode = False
                    break
                time.sleep(0.04)
            else:
                log(f"{nowstr()} [IDLE] 警戒結束，進入空閒")
                in_guard_mode = False
                in_idle_mode = True
            continue
        if in_idle_mode:
            log(f"{nowstr()} [IDLE] idle狀態 buff+移動")
            buff_result = autobuff.check_and_buff(
                should_interrupt=lambda: NEED_HEAL,
                interruptible_sleep=lambda t, c, s: not NEED_HEAL
            )
            if buff_result is False:
                in_idle_mode = False
                continue
            elif buff_result is True:
                t0 = time.time()
                while time.time() - t0 < 1.2:
                    if NEED_HEAL:
                        in_idle_mode = False
                        break
                    time.sleep(0.05)
                continue
            interval = random.uniform(IDLE_MOVE_INTERVAL_MIN, IDLE_MOVE_INTERVAL_MAX)
            t1 = time.time()
            while time.time() - t1 < interval:
                if NEED_HEAL:
                    in_idle_mode = False
                    break
                time.sleep(0.05)
            continue
        time.sleep(0.04)

def autobuff_only():
    global started, running
    BUFF_INTERVAL_SEC = autobuff.BUFF_INTERVAL_SEC
    print("只執行自動 Buff，按 r 開始，q 結束")
    while running and not started:
        time.sleep(0.05)
    last_time = 0
    while running:
        now = time.time()
        if now - last_time > BUFF_INTERVAL_SEC:
            autobuff.do_buff()
            autobuff.buff_move_preset()
            last_time = now
        for _ in range(50):
            if not running:
                break
            time.sleep(0.1)

if __name__ == "__main__":
    threading.Thread(target=monitor_keys, daemon=True).start()
    if MODE == "all":
        threading.Thread(target=ocr_monitor, daemon=True).start()
        main_behavior()
    elif MODE == "buff":
        autobuff_only()
    else:
        print("MODE 設定錯誤，請選擇 'all' 或 'buff'")
